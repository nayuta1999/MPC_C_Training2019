1
英文をそのまま出力するだけのprintf()を用意して、それだけが入っている関数を作ればよい。
引数は必要がないので何も書かなくて良い。

2
返り値が114514、つまりreturn 114514;のみが書かれた関数を作成すればよい。
引数は必要がないので何も書かなくて良い。

3
double型の引数a,bを受け取り、その和を返り値とする。つまりreturn a+b;が書かれた関数を作成すればよい。

4
int型の引数x,yを受け取り、その積を返り値とする。つまりreturn x*y;が書かれた関数を作成すればよい。

5
int型の引数a,bを受け取り、大きい方の値を返す。if文を用いて、
a<bならばb,それ以外ならばaを返り値とすればよい。

6
まず、main関数内で宣言されたint型のa,bは、ローカル変数なので、main関数内でしか使えない。
6-1は関数の引数を使わず、int a,bをグローバル変数とした実装である。
クソコードと言われるので絶対にやめましょう。
6-2はmain関数内でint a,bを宣言し、関数に引数として渡している。こちらのコードを推奨する。

7
int型の引数nを受け取り、for文でn回だけprintf()すればよい。

8
8-1はfor文によってnから1までを掛け算している。
8-2は、再帰関数を用いてn*(n-1)*...*1を計算して返り値としている。
どちらでやっても良い。基本的に再帰関数は使わなくても実装は可能。

9
9-1はwhile文によって実装している。
9-2は再帰関数によって実装している。
アルゴリズム自体は高校数学を復習して頂きたい。

10
各木材に対して、
1.何もしない
2.大きさを1増やす
3.大きさを1減らす
4.2本を1本にまとめる
という操作が行える。これを木材9本に対して行えばよい。しかし、よく考えてみると、2本にまとめる全ての組み合わせに対して、最後に+1,-1を行えばよいことに気付く。
よって、
1.何もしない
2.Aにl_iを合成
3.Bにl_iを合成
4.Cにl_iを合成
の4通りに対して、最後に+1,-1を必要な分行うことで、この問題を解くことが出来る。
再帰関数を使うと簡単に書くことが出来る。MIN,ABS関数はmath.hをインクルードすることでmin,abs関数として使用できる。


